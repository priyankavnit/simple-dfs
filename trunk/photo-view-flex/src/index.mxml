<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:view="org.agile.upload.view.*" xmlns:comp="org.agile.upload.component.*" height="100%" width="100%" horizontalAlign="center"
                verticalAlign="middle" creationComplete="init();">
    <mx:Style>
        global{
        	font-size: 12;	
        	font-style: normal;
        	font-weight: normal; 
            modalTransparencyBlur: 3;
            modalTransparency: 0.8;
            modalTransparencyColor: #161817;
            modalTransparencyDuration: 500;    
            theme-color: #595857;    	
        }  
        Button {
   			fontWeight: normal;
		}
    	.gridHeader {
   			fontWeight: normal;
   			fontStyle: normal;
   			textDecoration: none;
    	}
    </mx:Style>
    <mx:Spacer height="50%" width="600"/>
    <mx:Box width="600" direction="horizontal" paddingRight="1">
        <mx:Label text="Total image file list" fontWeight="bold"/>
        <mx:Spacer width="100%"/>
        <mx:Button click="list();" label="refresh"/>
        <mx:Button click="upload();" label="upload ..."/>
    </mx:Box>
    <mx:DataGrid id="grid" width="600" height="400" dataProvider="{files}" doubleClick="openView();" doubleClickEnabled="true" headerStyleName="gridHeader">
        <mx:columns>
            <comp:ArrayColumn headerText="ID" dataField="0" width="50" textAlign="center"/>
            <comp:ArrayColumn headerText="Name" dataField="1"/>
            <comp:ArrayColumn headerText="Modified" dataField="2" dataType="date" width="150"/>
        </mx:columns>
    </mx:DataGrid>
    <mx:Spacer height="50%" width="600"/>
    <mx:Box height="25" width="600" direction="horizontal">
        <mx:Label text="copyright   agile.chen@gmail.com"/>
        <mx:Spacer width="100%"/>
        <mx:Label id="memLabel" color="#313131"/>
    </mx:Box>
    <mx:Script>
        <![CDATA[
            import org.agile.upload.view.PhotoDialog;
            import org.agile.upload.entity.FileItem;
            import mx.controls.Alert;
            import mx.collections.ArrayCollection;
            import mx.managers.PopUpManager;
            import org.agile.upload.action.FileItemAction;
            import org.agile.upload.view.UploadDialog;

            [Bindable]
            private var files:ArrayCollection=new ArrayCollection();
            private var action:FileItemAction=new FileItemAction();

            private function init():void {
                list();
                memory();
            }

            private function upload():void {
                var app:Application=Application.application as Application;
                var dialog:UploadDialog=PopUpManager.createPopUp(app, UploadDialog, true) as UploadDialog;
                dialog.callback=list;
                PopUpManager.centerPopUp(dialog);
            }

            private function list():void {
                var item:FileItem=new FileItem();
                action.list(function(data:Object):void {
                        if (data != null) {
                            files=data as ArrayCollection;
                        }
                    });
            }

            private function openView():void {
                var item:Array=grid.selectedItem as Array;
                var id:Number=item[0];
                var app:Application=Application.application as Application;
                var dialog:PhotoDialog=PopUpManager.createPopUp(app, PhotoDialog, true) as PhotoDialog;
                dialog.view.fid=id;
                PopUpManager.centerPopUp(dialog);
            }

            private function rowNum(item:Object, col:int):String {
                var ix:int=files.getItemIndex(item) + 1;
                return String(ix);
            }

            private function memory():void {
                var timer:Timer=new Timer(5 * 1000, 0);
                timer.addEventListener(TimerEvent.TIMER, function():void {
                        System.gc();
                        memLabel.text=format(System.totalMemory);
                    });
                timer.start();
            }

            private function format(mem:uint):String {
                var k:uint=mem / 1024;
                var b:uint=mem % 1024;
                var m:uint=k / 1024;
                k=k % 1024;
                return m + "m," + k + "k";
            }
        ]]>
    </mx:Script>

</mx:Application>
